/*=====================================================================================
    FILE NAME :
        Sec_sic.h
    MODULE NAME :
        secsic
    GENERAL DESCRIPTION

    TECHFAITH Software Confidential Proprietary(c)
    Copyright 2002-2006 by TECHFAITH Software. All Rights Reserved.
    =======================================================================================
    Revision History
    Modification              Tracking
    Date       Author         Number    Description of changes
    ---------- -------------- --------- --------------------------------------
    2007-03-20 Bird           none      Init
  
=====================================================================================*/

/*******************************************************************************
*   Multi-Include-Prevent Section
*******************************************************************************/

#ifndef SEC_EDC_H
#define SEC_EDC_H

/*******************************************************************************
*   Macro Define Section
*******************************************************************************/

#define SECD_MSG_HEADER_LENGTH  5    
#define SEC_MSG_TYPE_LENGTH    1    /* Msg type length 1 byte */

/*******************************************************************************
*   Prototype Declare Section
*******************************************************************************/

WE_INT32 Sec_EncodeConnType
(
    WE_VOID **ppvMsg,
    WE_INT32  iType
);
WE_INT32 Sec_GetMsgLen(WE_VOID *pvBuf);
WE_INT32 Sec_DecodeSecDResp
(
    WE_VOID *pvMsg,
    WE_INT32 *piEvent,
    WE_VOID **ppvResp
);

WE_INT32 Sec_EncodeGetCipherSuite
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_UINT8 ucConnType
);
WE_INT32 Sec_EncodeSetUpConn
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_INT32 iMasterSecretId, 
    WE_INT32 iSecId, 
    WE_INT32 iFullHandshake,
    St_SecSessionInformation stSessionInfo,
    WE_UINT8   ucConnType
);
WE_INT32 Sec_EncodeStopConn
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_INT32 iSecId, 
    WE_UINT8   ucConnType
);
WE_INT32 Sec_EncodeRemovePeer
(
    WE_VOID** ppvMsg,
    WE_INT32 iMasterSecId
);
WE_INT32 Sec_EncodeAttachPeerToSession
(
    WE_VOID **ppvMsg,
    WE_UCHAR *pucAddress, 
    WE_INT32 iAddressLen,
    WE_UINT16 usPortnum, 
    WE_INT32 iMasterSecretId,
    WE_UINT8   ucConnType
);
WE_INT32 Sec_EncodeSearchPeer
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_UCHAR *pucAddress, 
    WE_INT32 iAddressLen,
    WE_UINT16 usPortNum, 
    WE_UINT8   ucConnType
);
WE_INT32 Sec_EncodeEnableSession
(
    WE_VOID **ppvMsg,
    WE_INT32 iMasterSecId,
    WE_UINT8 ucIsActive
);
WE_INT32 Sec_EncodeDisableSession
(
    WE_VOID **ppvMsg,
    WE_INT32 iMasterSecId
);
WE_INT32 Sec_EncodeSessionGet
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_INT32 iMasterSecID
);
WE_INT32 Sec_EncodeSessionRenew
(
    WE_VOID **ppvMsg,
    WE_INT32 iMasterSecID,
    WE_UINT8 ucSessionOpts,
    WE_UCHAR *pucSessionId,
    WE_UINT8 ucSessionIdLen,
    WE_UINT8 *aucCipherSuite,
    WE_UINT8 ucCompressionAlg,
    WE_UCHAR *pucPrivateKeyId,
    WE_UINT32 uiCreationTime
);
WE_INT32 Sec_EncodeGetPrfResult
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID, 
    WE_UINT8 ucAlg,
    WE_INT32 iMasterSecretId, 
    WE_UCHAR * pucSecret, 
    WE_INT32 iSecretLen, 
    WE_CHAR * pcLabel, 
    WE_UCHAR * pucSeed,
    WE_INT32 iSeedLen,
    WE_INT32 iOutputLen,
    WE_UINT8 ucConnType
);
WE_INT32 Sec_EncodeVerifySvrCertChain
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    WE_VOID *pvBuf,
    WE_INT32 iBufLen,
    WE_UINT8 ucConnType
);
WE_INT32 Sec_EncodeKeyExchange
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    WE_VOID *pvParam,
    WE_UINT8 ucAlg,
    WE_UCHAR *pucRandVal,
    WE_UINT8 ucConnType
);
WE_INT32 Sec_EncodeGetUserCert
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    WE_VOID *pvBuf,
    WE_INT32 iBufLen,
    WE_UINT8 ucConnType
);
WE_INT32 Sec_EncodeCompSign
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    WE_UCHAR *pucKeyId,
    WE_INT32 iKeyIdLen,
    WE_UCHAR *pucBuf,
    WE_INT32 iBufLen,
    WE_UINT8 ucConnType
);
WE_INT32 Sec_EncodeSSLHashUpdateWMasterSec
(
    WE_VOID **ppvMsg,
    WE_INT32 iMasterSecId
);
WE_INT32 Sec_EncodeEvtShowDlgAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    WE_VOID *pvData,
    WE_UINT32 uiLen
);

WE_INT32 Sec_EncodeGetCertNameList
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_INT32 iCertType
);
WE_INT32 Sec_EncodeGenKeyPair
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_UINT8 ucKeyType    
);
#ifdef G_SEC_CFG_SHOW_PIN
WE_INT32 Sec_EncodePinModify
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_UINT8 ucKeyType    
);
WE_INT32 Sec_EncodeEvtChangePinAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID, 
    St_ChangePinAction stChangePin
);
WE_INT32 Sec_EncodeEvtCreatePinAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID, 
    St_CreatePinAction stGenPin
);
WE_INT32 Sec_EncodeEvtPinAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID, 
    St_PinAction stPin
);

#endif

WE_INT32 Sec_EncodeGetCurSvrCert
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID, 
    WE_INT32 iSecId
);
WE_INT32 Sec_EncodeGetSessionInfo
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID, 
    WE_INT32 iSecId
);
WE_INT32 Sec_EncodeGetWtlsCurClasss
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_INT32 iSecId
);
WE_INT32 Sec_EncodeGetContractsList
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID
);
WE_INT32 Sec_EncodeTransferCert
(    
    WE_VOID **ppvMsg, 
    St_SecCertContent stCertContent
);
WE_INT32 Sec_EncodeGetRequestUserCert
(   
    WE_VOID **ppvMsg, 
    St_SecUserCertReqInfo stShowContractContent
);
WE_INT32 Sec_EncodeEvtConfirmAction
(
   WE_VOID **ppvMsg,
   WE_INT32 iTargetID,
   St_ConfirmAction stConfirm
);
WE_INT32 Sec_EncodeEvtNameConfirmAction
(   
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_NameConfirmAction stNameConfirm
);
WE_INT32 Sec_EncodeEvtHashAction
(   
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_HashAction stHash
);
WE_INT32 Sec_EncodeEvtShowCertContentAction
(    
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_ShowCertContentAction stShowCertContent
);
WE_INT32 Sec_EncodeEvtShowCertListAction
(    
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_ShowCertListAction stShowCertList
);
WE_INT32 Sec_EncodeEvtShowContractsListAction
(    
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_ShowContractsListAction stShowContractsList
);
WE_INT32 Sec_EncodeEvtStoreCertAction
(    
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_StoreCertAction stStoreCert
);
WE_INT32 Sec_EnocdeEvtShowContractContentAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    St_ShowContractContentAction stShowContractContent
);


WE_INT32 Sec_EncodeHandle
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetID,
    WE_INT32 iSignId, 
    WE_CHAR * pcText,
    WE_INT32 iKeyIdType,
    WE_CHAR * pcKeyId,
    WE_INT32 iKeyIdLen,
    WE_CHAR * pcStringToSign, 
    WE_INT32 iStringToSignLen, 
    WE_INT32 iOptions
 );

WE_INT32 Sec_EncodeEvtSelectCertAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    St_SelectCertAction stSelectCert
);
WE_INT32 SecS_EncodeEvtPinAction
(
    WE_VOID **ppvMsg,
    WE_INT32 iTargetId,
    St_PinAction stPin
);

/*server end decode*/
/*1.response*/

WE_INT32 Sec_DecodeSignTextResp(
                        WE_UINT8  *pcBuffer, WE_INT32 *piTargetID,
                        WE_INT32 *piSignId, WE_INT32 *piAlgorithm,
                         WE_CHAR **ppcSignature, WE_INT32 *piSigLen,
                         WE_CHAR **ppcHashedKey, WE_INT32 *piHashedKeyLen,
                         WE_CHAR **ppcCertificate, WE_INT32 *piCertificateLen,
                        WE_INT32 *piCertificateType, WE_INT32 *piErr);
WE_INT32 Sec_DecodeGetPrfResultResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult,
                               WE_UCHAR **ppucResBuf, WE_INT32 *piBufLen);
WE_INT32 Sec_DecodeWtlsVerifySvrCertResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeWtlsGetUsrCertResp(WE_UINT8  *pcBuffer, 
                    WE_INT32 *piTargetID, WE_INT32 *piResult,
                     WE_UCHAR **ppucKeyId, WE_INT32 *piKeyIdLen,
                     WE_UCHAR **ppucCert, WE_INT32 *piCertLen);
WE_INT32 Sec_DecodeWtlsGetCipherSuiteResp(WE_UINT8  *pcBuffer,  
                    WE_INT32 *piTargetID, WE_INT32 *piResult,
                     WE_UCHAR **ppucCipherMethods, WE_INT32 *piCipherMethodsLen,
                     WE_UCHAR **ppucKeyExchangeIds, WE_INT32 *piKeyExchangeIdsLen,
                     WE_UCHAR **ppucTrustedKeyIds, WE_INT32 *piTrustedKeyIdsLen);
WE_INT32 Sec_DecodeKeyExchangeResp(WE_UINT8  *pcBuffer,  
                             WE_INT32 *piTargetID, WE_INT32 *piResult, WE_INT32 *piMasterSecretId, 
                              WE_UCHAR **ppucPublicValue, WE_INT32 *piPublicValueLen);
WE_INT32 Sec_DecodeCompSigResp(WE_UINT8  *pcBuffer,
                         WE_INT32 *piTargetID, WE_INT32 *piResult,
                          WE_UCHAR **ppucSignature, WE_INT32 *piSignatureLen);
WE_INT32 Sec_DecodeTlsVerifySvrCertResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeTlsGetUsrCertResp(WE_UINT8  *pcBuffer, 
                            WE_INT32 *piTargetID, WE_INT32 *piResult,
                             WE_UCHAR **ppucPubkeyHash, WE_INT32 *pusPubKeyHashLen,
                             St_SecTlsAsn1Certificate **ppstCert, WE_INT32 *piNbrCerts);

WE_INT32 Sec_DecodeTlsGetCipherSuiteResp(WE_UINT8  *pcBuffer,  
                                        WE_INT32 *piTargetID, WE_INT32 *piResult,
                                         WE_UCHAR ** ppucCipherSuites, 
                                        WE_INT32 *piCipherSuitesLen);
WE_INT32 Sec_DecodeSSLGetMasterSecretResp(WE_UINT8  *pcBuffer, WE_INT32 *piTargetID, 
                                      WE_INT32 *piResult,  WE_UCHAR **ppucMasterSecret,
                                      WE_INT32 *piMasterSecretLen);

WE_INT32 Sec_DecodeSearchPeerResp(WE_UINT8  *pcBuffer,
                         WE_INT32 *piTargetID, WE_INT32 *piResult,
                         WE_UINT8 *pucConnectionType, WE_INT32 *piMasterSecretID,
                         WE_INT32 *piSecurityID);
WE_INT32 Sec_DecodeSessionGetResp(WE_UINT8  *pcBuffer,
                         WE_INT32 *piTargetID, WE_INT32 *piResult, 
                         WE_UINT8 *pucSessionOptions, WE_UCHAR **ppucSessionId,
                         WE_UINT8 *pucSessionIdLen, WE_UINT8 **ppucCipherSuite,
                         WE_UINT8 *pucCompressionAlg, WE_UCHAR **ppucPrivateKeyId,
                         WE_UINT32 *puiCreationTime)
WE_INT32 Sec_DecodeGetCertNameListResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeDeleteCertResponse(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piCertId, WE_INT32 *piResult);
WE_INT32 Sec_DecodeKeyPairGenResp(WE_UINT8  *pcBuffer,
                        WE_INT32 *piTargetID, WE_INT32 *piResult,  WE_UINT8 *pucKeyType, 
                         WE_UCHAR **ppucPublicKey, WE_INT32 *piPublicKeyLen, 
                         WE_UCHAR **ppucSig, WE_INT32 *piSigLen);
WE_INT32 Sec_DecodeGetPubKeyResp(WE_UINT8  *pcBuffer,
                        WE_INT32 *piTargetID, WE_INT32 *piResult,
                         WE_UCHAR **ppucPublicKey, WE_INT32 *piPublicKeyLen, 
                         WE_UCHAR **ppucSig, WE_INT32 *piSigLen);
WE_INT32 Sec_DecodeModifyPinResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeViewAndGetCertResp(WE_UINT8  *pcBuffer,
                            WE_INT32 *piTargetID, WE_INT32 *piResult, 
                            WE_INT32 *piCertId, WE_UCHAR **ppucCert, WE_INT32 *piCertLen);
WE_INT32 Sec_DecodeGetCurSvrCertResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeGetSessionInfoResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeWtlsCurClassResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult,
                              WE_INT32 *piInfoAvailable, WE_INT32 *piCertAvailable);
WE_INT32 Sec_DecodeClrSessionResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeGetContractsListResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeRemoveContractResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult);
WE_INT32 Sec_DecodeUserCertReqResp(WE_UINT8  *pcBuffer,
                         WE_INT32 *piTargetID, WE_INT32 *piResult,
                         WE_UCHAR **ppucCertReqMsg, WE_UINT32 *puiCertReqMsgLen);
WE_INT32 Sec_DecodeChangeWTLSCertAbleResp(WE_UINT8  *pcBuffer,
                              WE_INT32 *piTargetID, WE_INT32 *piResult,  WE_UINT8 *pucState);
/*2.ue*/
WE_INT32 Sec_DecodeConfirm(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeChangePin(WE_UINT8 *pucBuffer,  WE_VOID** ppvData);
WE_INT32 Sec_DecodeSelCert(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeNameConfirm(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeSigntextConfirm(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeCreatePin(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeHash(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodePin(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeShowCertContent(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeShowCertList(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeShowSessionContent(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeShowContractList(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeStoreCert(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeWarning(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeStoreContract(WE_UINT8 *pucBuffer, WE_VOID** ppvData);
WE_INT32 Sec_DecodeCurSvrCert(WE_UINT8 *pucBuffer, WE_VOID** ppvData);




#endif

